<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.20">
<title>Server side JSX with React4XP</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/*! Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */
/* Uncomment the following line when using as a custom stylesheet */
/* @import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"; */
html{font-family:sans-serif;-webkit-text-size-adjust:100%}
a{background:none}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
b,strong{font-weight:bold}
abbr{font-size:.9em}
abbr[title]{cursor:help;border-bottom:1px dotted #dddddf;text-decoration:none}
dfn{font-style:italic}
hr{height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
audio,video{display:inline-block}
audio:not([controls]){display:none;height:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type=checkbox],input[type=radio]{padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,::before,::after{box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;line-height:1;position:relative;cursor:auto;-moz-tab-size:4;-o-tab-size:4;tab-size:4;word-wrap:anywhere;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:0}
p{line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.square{list-style-type:square}
ul.circle ul:not([class]),ul.disc ul:not([class]),ul.square ul:not([class]){list-style:inherit}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:1px solid #dedede;word-wrap:normal}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt{background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
:not(pre).nobreak{word-wrap:normal}
:not(pre).nowrap{white-space:nowrap}
:not(pre).pre-wrap{white-space:pre-wrap}
:not(pre):not([class^=L])>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre{color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;line-height:1.45;text-rendering:optimizeSpeed}
pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}
pre>code{display:block}
pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;border-radius:3px;box-shadow:0 1px 0 rgba(0,0,0,.2),inset 0 0 0 .1em #fff;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin:0 auto;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:flex;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border:1px solid #e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:none;background:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:hsla(0,0%,100%,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
details{margin-left:1.25rem}
details>summary{cursor:pointer;display:block;position:relative;line-height:1.6;margin-bottom:.625rem;outline:none;-webkit-tap-highlight-color:transparent}
details>summary::-webkit-details-marker{display:none}
details>summary::before{content:"";border:solid transparent;border-left:solid;border-width:.3em 0 .3em .5em;position:absolute;top:.5em;left:-1.25rem;transform:translateX(15%)}
details[open]>summary::before{border:solid transparent;border-top:solid;border-width:.5em .3em 0;transform:translateY(15%)}
details>summary::after{content:"";width:1.25rem;height:1em;position:absolute;top:.3em;left:-1.25rem}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class=paragraph]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6);word-wrap:anywhere}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border:1px solid #e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;border-radius:4px}
.sidebarblock{border:1px solid #dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;border-radius:4px}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:first-child,.sidebarblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child,.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock>.content>pre{border-radius:4px;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.listingblock>.content>pre{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.listingblock>.content>pre{font-size:1em}}
.literalblock pre,.listingblock>.content>pre:not(.highlight),.listingblock>.content>pre[class=highlight],.listingblock>.content>pre[class^="highlight "]{background:#f7f7f8}
.literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.prettyprint{background:#f7f7f8}
pre.prettyprint .linenums{line-height:1.45;margin-left:2em}
pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}
pre.prettyprint li code[data-lang]::before{opacity:1}
pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}
table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}
table.linenotable td.code{padding-left:.75em}
table.linenotable td.linenos,pre.pygments .linenos{border-right:1px solid;opacity:.35;padding-right:.5em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}
pre.pygments span.linenos{display:inline-block;margin-right:.75em}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock:not(.excerpt)>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans-serif;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt>blockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;font-size:.85rem;text-align:left;margin-right:0}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:1.25em;word-wrap:anywhere}
td.tableblock>.content>:last-child{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>*>tr>*{border-width:1px}
table.grid-cols>*>tr>*{border-width:0 1px}
table.grid-rows>*>tr>*{border-width:1px 0}
table.frame-all{border-width:1px}
table.frame-ends{border-width:1px 0}
table.frame-sides{border-width:0 1px}
table.frame-none>colgroup+*>:first-child>*,table.frame-sides>colgroup+*>:first-child>*{border-top-width:0}
table.frame-none>:last-child>:last-child>*,table.frame-sides>:last-child>:last-child>*{border-bottom-width:0}
table.frame-none>*>tr>:first-child,table.frame-ends>*>tr>:first-child{border-left-width:0}
table.frame-none>*>tr>:last-child,table.frame-ends>*>tr>:last-child{border-right-width:0}
table.stripes-all>*>tr,table.stripes-odd>*>tr:nth-of-type(odd),table.stripes-even>*>tr:nth-of-type(even),table.stripes-hover>*>tr:hover{background:#f8f8f7}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
li>p:empty:only-child::before{content:"";display:inline-block}
ul.checklist>li>p:first-child{margin-left:-1em}
ul.checklist>li>p:first-child>.fa-square-o:first-child,ul.checklist>li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist>li>p:first-child>input[type=checkbox]:first-child{margin-right:.25em}
ul.inline{display:flex;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
td.hdlist2{word-wrap:anywhere}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:4px solid #fff;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background:#00fafa}
.black{color:#000}
.black-background{background:#000}
.blue{color:#0000bf}
.blue-background{background:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background:#fa00fa}
.gray{color:#606060}
.gray-background{background:#7d7d7d}
.green{color:#006000}
.green-background{background:#007d00}
.lime{color:#00bf00}
.lime-background{background:#00fa00}
.maroon{color:#600000}
.maroon-background{background:#7d0000}
.navy{color:#000060}
.navy-background{background:#00007d}
.olive{color:#606000}
.olive-background{background:#7d7d00}
.purple{color:#600060}
.purple-background{background:#7d007d}
.red{color:#bf0000}
.red-background{background:#fa0000}
.silver{color:#909090}
.silver-background{background:#bcbcbc}
.teal{color:#006060}
.teal-background{background:#007d7d}
.white{color:#bfbfbf}
.white-background{background:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);border-radius:50%;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt,summary{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,td.hdlist1,span.alt,summary{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background:#fffef7;border-color:#e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]{border-bottom:1px dotted}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#header,#content,#footnotes,#footer{max-width:none}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media amzn-kf8,print{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>
<body class="article toc2 toc-right">
<div id="header">
<h1>Server side JSX with React4XP</h1>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#introduction">Introduction</a></li>
<li><a href="#create_project">Create project</a></li>
<li><a href="#project_structure">Project structure</a></li>
<li><a href="#react4xp">React4XP</a></li>
<li><a href="#build_and_deploy">Build and Deploy</a></li>
<li><a href="#hello_react">Hello React</a>
<ul class="sectlevel2">
<li><a href="#code">Code</a></li>
<li><a href="#entries">Entries</a></li>
<li><a href="#setup">Setup</a></li>
<li><a href="#output">Output</a></li>
</ul>
</li>
<li><a href="#client_side_rendering">Client-side rendering</a>
<ul class="sectlevel2">
<li><a href="#code_2">Code</a></li>
<li><a href="#jsxpath">JsxPath</a></li>
<li><a href="#setup_2">Setup</a></li>
<li><a href="#output_2">Output</a></li>
</ul>
</li>
<li><a href="#custom_flow">Custom flow</a>
<ul class="sectlevel2">
<li><a href="#code_3">Code</a></li>
<li><a href="#setup_3">Setup</a></li>
<li><a href="#output_3">Output</a></li>
</ul>
</li>
<li><a href="#chaining">Chaining</a>
<ul class="sectlevel2">
<li><a href="#code_4">Code</a></li>
<li><a href="#setup_4">Setup</a></li>
<li><a href="#output_4">Output</a></li>
</ul>
</li>
<li><a href="#need_to_go_deeper">Need to go deeper?</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This tutorial will show you step-by-step how to build XP sites and apps, using React rendering.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>This documentation expects basic knowledge of React, XP and Webpack.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://reactjs.org/tutorial/tutorial.html">the official intro to React</a></p>
</li>
<li>
<p><a href="https://developer.enonic.com/start">the Enonic XP developer portal</a>.</p>
</li>
<li>
<p><a href="https://webpack.js.org/guides/getting-started/">webpack documentation</a>.</p>
</li>
</ul>
</div>
</td>
</tr>
</table>
</div>
<div class="imageblock">
<div class="content">
<img src="media/react4xp.svg" alt="React4xp logo" width="256px">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="introduction"><a class="link" href="#introduction">Introduction</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This tutorial takes you through the basic steps of creating a React app, helping you kickstart a React4xp project of your own.</p>
</div>
<div class="paragraph">
<p>During this exercise you will:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>set up the starter and meet the React4xp library,</p>
</li>
<li>
<p>learn how to use it to render a basic React component from any regular XP controller - in this case a part,</p>
</li>
<li>
<p>inject editorial data into your React component,</p>
</li>
<li>
<p>see how to point the controller to the React components - and where to put them in your project source,</p>
</li>
<li>
<p>dig a little deeper into ways of controlling the rendering,</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="create_project"><a class="link" href="#create_project">Create project</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Set up the starter project locally. With Enonic XP 7, run the following command:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>enonic project create -r starter-react4xp</pre>
</div>
</div>
<div class="paragraph">
<p>Remember to create a <strong>new XP sandbox</strong> when completing the project wizard.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<strong>Don&#8217;t have the Enonic CLI?</strong> Visit the <a href="https://developer.enonic.com/start">Getting started guide</a> to install it.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="project_structure"><a class="link" href="#project_structure">Project structure</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you&#8217;re used to working with a typical XP project using <a href="https://developer.enonic.com/templates/webpack">webpack</a>, the structure will look familiar -
the biggest news is the folder <code>resources/react4xp/</code>.</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
This structure is just an overview, and you don&#8217;t need to know it by heart to get started. For now, <strong>just put your JSX source files under <code>react4xp/_entries/</code> or under <code>site/</code>, and you&#8217;re ready to build and run.</strong>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Your project folder should look something like this:</p>
</div>
<div class="listingblock">
<div class="title">Selected files:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">build.gradle <i class="conum" data-value="1"></i><b>(1)</b>
settings.gradle <i class="conum" data-value="1"></i><b>(1)</b>
package.json <i class="conum" data-value="2"></i><b>(2)</b>
src/
  main/
    resources/
      react4xp/ <i class="conum" data-value="3"></i><b>(3)</b>
        _entries/ <i class="conum" data-value="4"></i><b>(4)</b>
          REPLACE_ME.jsx <i class="conum" data-value="5"></i><b>(5)</b>
      site/
        pages/
            default/ <i class="conum" data-value="6"></i><b>(6)</b>
              default.es6
              default.html
              default.xml
        parts/
          hello-react/ <i class="conum" data-value="7"></i><b>(7)</b>
            hello-react.es6
            hello-react.jsx
            hello-react.xml</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The gradle files are used to set up the build system: the <strong>lib-react4xp library</strong> and some building tasks,</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>package.json</code> sets up NPM import of some packages that React4XP and the build process need,</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Webpack will look for your React-specific JS and JSX source files under the <code>react4xp/</code> folder.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>You can add your own subfolder structure under <code>/react4xp/</code>, but note that <code>react4xp/_entries/</code> is a reserved, "magic" name. This folder is where you put <strong>"entries"</strong> - the source files that will be accessible to use in the XP controllers as in the examples. It&#8217;s also possible to put entries (with <code>.JSX</code>-extension) along with XP components (e.g. in <code>/site/parts</code> or <code>/pages</code>).</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Webpack needs <em>something</em> in its focus folders to avoid halting the build process, so <code>REPLACE_ME.jsx</code> is just an empty placeholder. You can remove it when you&#8217;ve added one or more React source files under here.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>For convenience, a bare-bone page controller is included with the starter&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>&#8230;&#8203;along with the first example from this tutorial.</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="react4xp"><a class="link" href="#react4xp">React4XP</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>This starter is based on <strong>React4XP</strong>, which is a library and accompanying build structures that facilitate use of React in XP.
React4XP enables you to:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>use JSX in server-side rendering, similar to other XP templating engines</p>
</li>
<li>
<p>supports isomorphic client- or serverside rendering and hydration,</p>
</li>
<li>
<p>use build flow and compilation with automated optimized asset serving</p>
</li>
<li>
<p>aims to be modular and tweakable, making it possible to pop the hood, pick it apart and set things up your own way. Godspeed!</p>
</li>
<li>
<p>is flexible enough to cover many more advanced use cases,</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="build_and_deploy"><a class="link" href="#build_and_deploy">Build and Deploy</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>To build and deploy the starter app, run this command from your shell:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>enonic project deploy</pre>
</div>
</div>
<div class="paragraph">
<p>Accept starting the sandbox.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>To verify that your app started successfully, you should find an entry similar to this in the sandbox log:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>2019-04-09 13:40:40,765 INFO ... Application [&lt;name.of.your.app&gt;] installed successfully</pre>
</div>
</div>
</td>
</tr>
</table>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
For the examples below, you can copy/paste the code examples into your project, or download the examples along with everything needed to run, by using git and checking out the <a href="https://github.com/enonic/starter-react4xp/tree/examples">examples branch of starter-react4xp</a>.
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="hello_react"><a class="link" href="#hello_react">Hello React</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Let&#8217;s make a simple XP part that displays "Hello World", using a react component: <code>hello-react</code>.</p>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">site/parts/hello-react/
  hello-react.xml
  hello-react.jsx
  hello-react.es6</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="code"><a class="link" href="#code">Code</a></h3>
<div class="paragraph">
<p>Add a <strong>part definition</strong>. It doesn&#8217;t need anything special, just XP boilerplate:</p>
</div>
<div class="listingblock">
<div class="title">hello-react.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;part&gt;
  &lt;display-name&gt;Hello React&lt;/display-name&gt;
  &lt;description&gt;Simple example with server-side rendering by default&lt;/description&gt;
  &lt;form /&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now for <strong>the React component</strong> itself:</p>
</div>
<div class="listingblock">
<div class="title">hello-react.jsx</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React from 'react';

export default (props) =&gt; &lt;p&gt;Hello {props.greetee}!&lt;/p&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>It takes a <code>greetee</code> prop and greets it with a booming "Hello"! This is our first example of an <em>Entry</em>:</p>
</div>
</div>
<div class="sect2">
<h3 id="entries"><a class="link" href="#entries">Entries</a></h3>
<div class="paragraph">
<p><strong><em>Entries</em> in React4XP are the React components that can be accessed by React4XP</strong>. They are just any standard JSX file, as long as it:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>default-exports a function that takes an optional <code>props</code> parameter and returns a React element,</p>
</li>
<li>
<p>is placed either under the folder <code>/react4xp/_entries</code>, or in a part or page folder under <code>site/</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>When done, they are automatically handled by React4XP and can be easily used in XP controllers:</p>
</div>
<div class="paragraph">
<p>The <strong>part controller</strong> uses React4XP to render the entry:</p>
</div>
<div class="listingblock">
<div class="title">hello-react.es6:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');

exports.get = function(request) {
    const component = portal.getComponent();
    const props = { greetee: "world" };

    return React4xp.render(component, props, request);
};</code></pre>
</div>
</div>
<div class="paragraph">
<p>It basically just imports <code>React4xp</code> and uses the <code>.render</code> function, similar to how you might be familiar with from Thymeleaf or other XP template engines:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The first argument is a reference to the template. In our case the template is the React4XP entry, and React4XP uses the <code>component</code> data (for the part itself) to locate the JSX file in the part&#8217;s own folder (expecting the same file name as the part).</p>
</li>
<li>
<p>The second argument, <code>props</code>, is similar to the <code>model</code> argument in the Thymeleaf renderer. No big surprise: it&#8217;s passed to the entry&#8217;s <code>props</code>. Here is the <em>world</em> we&#8217;re about to greet.</p>
</li>
<li>
<p>The third <code>request</code> argument is necessary for a fully activated React rendering. You <em>can</em> leave it out to render the entry as pure HTML if you like JSX as a pure templating language, but it won&#8217;t be activated (<a href="https://reactjs.org/docs/react-dom.html#hydrate">hydrated</a>) in the browser.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>The returned response object</strong> from <code>.render</code> is sent straight from the controller to the client, and contains:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a <code>body</code> field with a server-side rendering (in static HTML) of the entry with the entered props,</p>
</li>
<li>
<p>and some <code>pageContributions</code> that make the client activate the React entry (containing the necessary asset links and React hydration commands).</p>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>An important difference from Thymeleaf&#8217;s renderer is that <code>React4XP.render</code> generates <em>a full response object</em> that can be directly returned from the controller, instead of just HTML that you need to wrap in a <code>body</code> field in the controller&#8217;s response object.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><strong>That&#8217;s it. This part is ready to display in XP!</strong></p>
</div>
</div>
<div class="sect2">
<h3 id="setup"><a class="link" href="#setup">Setup</a></h3>
<div class="paragraph">
<p>Let&#8217;s add it to a page in Content Studio and render it:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Run <code>enonic project deploy</code> from your shell, start the sandbox and point your browser to <code>localhost:8080/admin</code>.</p>
</li>
<li>
<p>Log in to XP and open Content Studio.</p>
</li>
<li>
<p>Create some content (e.g. a site with the Default Page controller included with the starter, or a <a href="https://market.enonic.com/vendors/enonic/landingpage-lib">a landing page</a>). Anything with a Region will do.</p>
</li>
<li>
<p>Insert the new part into the region, and select the <code>hello-react</code> part you just made.</p>
</li>
<li>
<p>Enter the preview to view the content outside of Content Studio. You should now see:</p>
</li>
</ul>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="media/hello-world.png" alt="Rendering: Hello World. In fabulous Times New Roman, because a good tutorial has no irrelevant layers of complexity." width="492px">
</div>
</div>
</div>
<div class="sect2">
<h3 id="output"><a class="link" href="#output">Output</a></h3>
<div class="paragraph">
<p>Curious about what happened here? <strong>View the page source code in the browser</strong> to see what <code>.render</code> created - something like this (the number-tagged lines):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;(...)&lt;/head&gt;

  &lt;body&gt;

    &lt;main data-portal-region="main" class="xp-region"&gt;
      &lt;div (...) id="parts_hello-react__main_0"&gt;
      	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;world&lt;!-- --&gt;!&lt;/p&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;/div&gt;
    &lt;/main&gt;

    &lt;script src="(...) /react4xp/externals.88e80cab5.js"&gt;&lt;/script&gt;  <i class="conum" data-value="2"></i><b>(2)</b>
    &lt;script src="(...) /react4xp-client/"&gt;&lt;/script&gt; <i class="conum" data-value="3"></i><b>(3)</b>
    &lt;script src="(...) /react4xp/site/parts/hello-react/hello-react.js"&gt;&lt;/script&gt; <i class="conum" data-value="4"></i><b>(4)</b>
    &lt;script defer&gt; <i class="conum" data-value="5"></i><b>(5)</b>
      React4xp.CLIENT.hydrate(
        React4xp['site/parts/hello-react/hello-react'],
        "parts_hello-react__main_0",
        { "greetee": "world", "react4xpId": "parts_hello-react__main_0" }
      );
    &lt;/script&gt;

   &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A container element with an ID, and inside it: an HTML representation of the JSX entry, pre-rendered by React4XP on the server with the initial props.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>A standard <code>externals</code> chunk (the exact path may vary with local setups, so it&#8217;s truncated to <code>(&#8230;&#8203;)</code>. The same goes for the cache-busting hash in the filename). This contains React and ReactDOM, built-in with React4XP.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The React4xp client wrapper, which enables the hydration command in point #5, among other things. A global client-side object is created, <code>React4xp</code>, which will contain all things React4xp in runtime. The client wrapper is <code>React4xp.CLIENT</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The entry itself - the compiled version of <code>hello-react.jsx</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Calling <code>React4xp.CLIENT.hydrate</code>, the hydration of the entry along with a path pointer to the entry (we&#8217;ll get back to this below, as the concept of <em>jsxPath</em>), the ID of the container element the entry is rendered into, and the props.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>We only added the <code>greetee</code> prop in the controller. The other one, <code>react4xpId</code>, is the unique ID of the component, same as the container element ID. It&#8217;s always added as a prop for each entry, conveniently helping to separate multiple instances of the same component (e.g. allowing them to share a common redux store without meddling with each other&#8217;s state).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="client_side_rendering"><a class="link" href="#client_side_rendering">Client-side rendering</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this example we&#8217;ll create another part, similar to <a href="#hello_react">Hello React</a>, but with these variations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Use client side rendering</strong> with a <code>clientRender</code> flag, turning the entire output into client-side React component.</p>
</li>
<li>
<p><strong>Renter into existing target element</strong> which comes from a Thymeleaf template <em>before</em> the entry is rendered into it.</p>
</li>
<li>
<p><strong>Reuse the "hello-react" template</strong> created in the <a href="#hello_react">Hello React</a> examples</p>
</li>
<li>
<p><strong>Insert editorial data</strong> And use these through the props.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">site/parts/
  hello-react/
    hello-react.jsx
  client-render/
    client-render.xml
    client-render.html
    client-render.es6</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="code_2"><a class="link" href="#code_2">Code</a></h3>
<div class="paragraph">
<p><strong>The part definition</strong> is still pretty unremarkable.
Only now there&#8217;s a <code>greetee</code> TextLine input field ready for some editorial text from Content Studio.</p>
</div>
<div class="listingblock">
<div class="title">client-render.xml:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-xml" data-lang="xml">&lt;part&gt;
	&lt;display-name&gt;Client Rendering&lt;/display-name&gt;
    &lt;description&gt;Client-side rendered react component&lt;/description&gt;
	&lt;form&gt;
        &lt;input name="greetee" type="TextLine"&gt;
            &lt;label&gt;Who or what should we greet?&lt;/label&gt;
            &lt;occurrences minimum="1" maximum="1"/&gt;
            &lt;default&gt;world&lt;/default&gt;
        &lt;/input&gt;
    &lt;/form&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>The thymeleaf template</strong> shows that a target container element can be anywhere in an HTML body - same as in vanilla react - as long as we point to it with a unique element ID. Here: <code>"second-example-container"</code>.</p>
</div>
<div class="listingblock">
<div class="title">client-render.html</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;div class="clientrender-example"&gt;
    &lt;h2&gt;Client-side rendering example&lt;/h2&gt;
    &lt;p&gt;Skips server-side rendering, and instead sets up client-side react to render the entry into the container below:&lt;/p&gt;
    &lt;div id="second-example-container"&gt;&lt;/div&gt;
    &lt;p&gt;(And we're done)&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
We&#8217;ve hardcoded the ID here and in the controller for clarity. The best practice however, would be to pass it to thymeleaf through the model - see <a href="#custom_flow">Custom flow</a>.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Moving on to <strong>the part controller</strong>, where the React4xp stuff happens:</p>
</div>
<div class="listingblock">
<div class="title">client-render.es6:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');
const thymeleaf = require('/lib/thymeleaf');

const view = resolve('client-render.html'); <i class="conum" data-value="1"></i><b>(1)</b>

exports.get = function(request) {
    const component = portal.getComponent();

    const preExistingBody = thymeleaf.render(view, {}); <i class="conum" data-value="1"></i><b>(1)</b>

    const props = {
        greetee: component.config.greetee <i class="conum" data-value="2"></i><b>(2)</b>
    };

    const params = {
        <i class="conum" data-value="3"></i><b>(3)</b>
        body: preExistingBody,
        id: 'second-example-container',
        clientRender: true,
    };

    const jsxPath = 'site/parts/hello-react/hello-react'; <i class="conum" data-value="4"></i><b>(4)</b>

    return React4xp.render(jsxPath, props, request, params);</code></pre>
</div>
</div>
<div class="paragraph">
<p>What&#8217;s happening here?</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The HTML with the target container element is rendered,</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>We get the <code>greetee</code> value from XP and insert in into the props,</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>We&#8217;re adding some <strong>parameters</strong> as a fourth argument object to <code>.render</code>:
<div class="ulist">
<ul>
<li>
<p><code>body</code> is the HTML body we&#8217;re inserting the React entry into,</p>
</li>
<li>
<p><code>id</code> is setting the ID, and targeting that container element in <code>body</code>,</p>
<div class="ulist">
<ul>
<li>
<p>A side note: in the first example, we didn&#8217;t pass an <code>id</code> or a <code>body</code> parameter to <code>.render</code>, but it still worked. <strong>They are both optional</strong>, React4XP generates what&#8217;s missing: If no <code>body</code> is found, React4xp will generate an empty HTML with a matching element ID. If there&#8217;s no <code>id</code> found either, a random number is used - or data from <code>component</code> if you used that in the entry argument. If there&#8217;s a <code>body</code> but it doesn&#8217;t have any elements with an ID matching the <code>id</code> parameter, an empty target container element is added at the end of <code>body</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>clientRender</code>: if this is truthy, you get old-school client-side React rendering. <code>.render</code> doesn&#8217;t render the entry on the server-side, but leaves the target container unchanged and instead makes some page contributions that makes the browser build the entry into the target container.</p>
</li>
<li>
<p>There&#8217;s also an optional <code>pageContributions</code> field, for adding pre-existing page contributions to the ones that <code>.render</code> generates.</p>
</li>
</ul>
</div></td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Here an important concept is introduced - the <em>jsxPath</em>:</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="jsxpath"><a class="link" href="#jsxpath">JsxPath</a></h3>
<div class="paragraph">
<p><strong>A <em>jsxPath</em> is the name of an entry in React4xp</strong>. Remember how we used the <code>component</code> object to refer to the entry in the first example, which is the easiest way but <em>only works if the entry is in the same folder and has the same name</em>. Here we want to access the entry (the same entry we used before) from a different part&#8217;s folder - from <em>anywhere</em> actually. JsxPaths are <em>name strings</em>, not paths relative to the controller (so avoid <code>../</code> etc).</p>
</div>
<div class="paragraph">
<p><strong>Rules of thumb for jsxPaths:</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>If an entry file is a JSX file under <code>src/main/resources/site</code>, the jsxPath is the file path relative to <code>src/main/resources/</code> - unix-style and without file extension.</p>
</li>
<li>
<p>An entry can also be located under <code>src/main/resources/react4xp/_entries</code>, and then the jsxPath will be relative to that folder instead.</p>
</li>
<li>
<p>If you&#8217;re ever unsure: all the available jsxPaths are stored in <code>build/resources/main/assets/react4xp/entries.json</code>. This file is generated by webpack during build (and shouldn&#8217;t be deleted or edited).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Okay, enough - time to run the example!</strong></p>
</div>
</div>
<div class="sect2">
<h3 id="setup_2"><a class="link" href="#setup_2">Setup</a></h3>
<div class="ulist">
<ul>
<li>
<p>The new part is ready. Add it to some content in Content Studio, the same way you did in <a href="#client_side_rendering">Client-side rendering</a>.</p>
</li>
<li>
<p>Change the part&#8217;s <code>greetee</code> field: edit the content, click and mark the "Client-side rendering example" part, and edit the "Who or what should we greet?" field on the right-side config panel. When you save it, the preview should update.</p>
</li>
</ul>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="media/editing-clientside.png" alt="Changing props editorially in Content Studio" width="1037px">
</div>
</div>
</div>
<div class="sect2">
<h3 id="output_2"><a class="link" href="#output_2">Output</a></h3>
<div class="paragraph">
<p>If we open a Preview tab and dig into <strong>the output page source</strong>, it&#8217;s similar to the previous example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;body&gt;
  &lt;main data-portal-region="main" class="xp-region"&gt;

    &lt;div class="clientrender-example"&gt;
      &lt;h2&gt;Client-side rendering example&lt;/h2&gt;
      &lt;p&gt;Skips server-side rendering, and instead sets up client-side react to render the entry into the container below:&lt;/p&gt;
      &lt;div id="serverside-example-container"&gt;&lt;/div&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;p&gt;(And we're done).&lt;/p&gt;
    &lt;/div&gt;

  &lt;/main&gt;

  &lt;script src="(...) /react4xp/externals.88e80cab5.js" &gt;&lt;/script&gt;
  &lt;script src="(...) /react4xp-client/" &gt;&lt;/script&gt;
  &lt;script src="(...) /react4xp/site/parts/hello-react/hello-react.js"&gt;&lt;/script&gt; <i class="conum" data-value="2"></i><b>(2)</b>
  &lt;script defer&gt; <i class="conum" data-value="3"></i><b>(3)</b>
    React4xp.CLIENT.render(
        React4xp['site/parts/hello-react/hello-react'],
        "second-example-container" ,
        {
            "greetee":"from the client side",
            "react4xpId":"second-example-container"
        }
    );
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Most notable differences from the first example:</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The target container is now initially empty, there was no rendered HTML from the server.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The imported entry is still the same as in the previous example. This is the compiled version of the JSX component we pointed to with <code>jsxPath</code> in the controller.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Instead of <code>.hydrate</code>, we&#8217;re calling <code>.render</code>. Our react component is rendered and inserted into the <code>"serverside-example-container"</code> element <em>by the browser</em>. <code>React4xp.CLIENT.render</code> has the same signature as <code>React4xp.CLIENT.hydrate</code>: <code>(entryJsxPath, targetElementId, props)</code>.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="custom_flow"><a class="link" href="#custom_flow">Custom flow</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this example we won&#8217;t use <code>.render</code>.
Instead, we&#8217;ll look at a more direct syntax that gives you better control and opportunities for logic steps when you handle the entry.</p>
</div>
<div class="paragraph">
<p>We&#8217;ll construct <strong>a data-holding React4xp object</strong> from an entry, manipulate it a little,
and use its built-in methods to render the <code>body</code> and the <code>pageContributions</code> separately.</p>
</div>
<div class="paragraph">
<p>Other features demonstrated:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The target container ID is inserted into <code>body</code> by Thymeleaf, which gets it from the data-holding object</p>
</li>
<li>
<p>Using an entry outside of XP&#8217;s <code>/site/</code> structure, in the base directory <code>/react4xp/_entries</code></p>
</li>
<li>
<p>Making some raw XP page contributions before rendering, with a script with inserted editorial data. Then passing that <code>pageContributions</code> object through <code>.renderPageContributions</code>, adding it to the React4XP page contributions</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">react4xp/_entries/
  ColorThing.jsx
site/parts/custom-flow/
  custom-flow.xml
  custom-flow.html
  custom-flow.es6</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="code_3"><a class="link" href="#code_3">Code</a></h3>
<div class="paragraph">
<p><strong>The part definition</strong> now defines some other editorial data: <code>color</code>.</p>
</div>
<div class="listingblock">
<div class="title">custom-flow.xml:</div>
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;part&gt;
  &lt;display-name&gt;Custom Flow&lt;/display-name&gt;
  &lt;description&gt;React4xp object syntax, and more&lt;/description&gt;
  &lt;form&gt;
    &lt;input name="color" type="TextLine"&gt;
      &lt;label&gt;What's the color of the thing?&lt;/label&gt;
      &lt;occurrences minimum="1" maximum="1"/&gt;
      &lt;default&gt;red&lt;/default&gt;
    &lt;/input&gt;
  &lt;/form&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>The react component</strong> is inline-styled with the color it gets from the <code>props</code>:</p>
</div>
<div class="listingblock">
<div class="title">ColorThing.jsx:</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">import React from 'react';

export default (props) =&gt;
  &lt;div style={{border: `1px dotted ${props.color}`,margin:"5px",padding:"5px" }}&gt;
    &lt;h2&gt;The {props.color} thing&lt;/h2&gt;
    &lt;p style={{color: props.color}}&gt;Hey, I'm pretty {props.color}!&lt;/p&gt;
  &lt;/div&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>The Thymeleaf view</strong> receives the ID of the target container element from Thymeleaf:</p>
</div>
<div class="listingblock">
<div class="title">custom-flow.html</div>
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;div&gt;
    &lt;p&gt;Here comes the thing:&lt;/p&gt;
    &lt;div data-th-id="${targetId}"&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Finally, the controller:</p>
</div>
<div class="listingblock">
<div class="title">custom-flow.es6</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">const portal = require('/lib/xp/portal');
const React4xp = require('/lib/enonic/react4xp');
const thymeleaf = require('/lib/thymeleaf');

const view = resolve('custom-flow.html');

exports.get = function(request) {
    const component = portal.getComponent();

    const reactObj = new React4xp('ColorThing'); <i class="conum" data-value="1"></i><b>(1)</b>

    reactObj
        .setProps({ color: component.config.color })
        .uniqueId(); <i class="conum" data-value="2"></i><b>(2)</b>

    const model = {
        targetId: reactObj.react4xpId <i class="conum" data-value="3"></i><b>(3)</b>
    };
    const preRenderedBody = thymeleaf.render(view, model);

    const preExistingPageContributions = {
        bodyEnd: `&lt;script&gt;
        	console.log('Okay, rendered the ${reactObj.props.color} thing.');
        		&lt;/script&gt;`
    }; <i class="conum" data-value="3"></i><b>(3)</b>

    return { <i class="conum" data-value="4"></i><b>(4)</b>

        body: reactObj.renderBody({
            body: preRenderedBody, <i class="conum" data-value="5"></i><b>(5)</b>
        }),

        pageContributions: (request.mode === 'live' || request.mode === 'preview') ? <i class="conum" data-value="6"></i><b>(6)</b>
            reactObj.renderPageContributions({ <i class="conum" data-value="7"></i><b>(7)</b>
                pageContributions: preExistingPageContributions
            }) :
            undefined
    }
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Constructing the data-holding React4XP object <code>reactObj</code>. The constructor takes <strong>one mandatory argument</strong>: an entry reference. Just like the first argument in <code>.render</code>, the entry reference can be a jsxPath OR an XP component object. Here it&#8217;s a jsxPath. So why is <code>ColorThing</code>, and <em>only</em> that, the jsxPath to <code>ColorThing.jsx</code>? Because the JSX file is at the root level of the React4XP <em>entries base folder</em>: <code>src/main/resources/react4xp/_entries</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The React4XP object has setter methods that return the object itself, so you can set any optional attributes with a chained builder pattern like in the example, or separately. The uniqueId() method forces the ID of the object and the target container element to be unique. If an object doesn&#8217;t have an ID, this will be called by default when rendering (so we could have just skipped it here). The order of the setter methods doesn&#8217;t matter. This example is equivalent to:
reactObj.setProps({color: component.config.color});
reactObj.uniqueId();</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>We can read attributes from <code>reactObj</code> before the rendering. At this point, the ID (<code>react4xpId</code>) and <code>props</code> are set in it. We read them out and injecting them into the thymeleaf model and into some random page contributions.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>Here, <code>body</code> and <code>pageContributions</code> are rendered separately (<code>renderBody</code> and <code>renderPageContributions</code>). Remember that this is different from <code>.render</code> which does everything in one go.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>The Thymeleaf-rendered <code>body</code> is given to <code>.renderBody</code>, which will insert react into that HTML. Again, the <code>body</code> parameter is optional - if we don&#8217;t submit it <code>.renderBody</code> will just generate a target container for you, with a matching ID.</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td>The other difference from <code>.render</code>: <em>there&#8217;s no automatic selection of rendering mode here</em>. If we want to <strong>avoid active client-side JS running in Content Studio&#8217;s <em>edit</em> and <em>inline</em> modes</strong>, we now need to do it manually: detect the viewing mode from the <code>request</code> object and just skip the pageContributions.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>We render the necessary page contributions for activating the entry, and pass <code>preExistingPageContributions</code> through <code>.renderPageContributions</code> - just adding it to the rendered page contributions. The <code>pageContributions</code> parameter is optional.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Just like the <code>.render</code> method in examples 01 and 02, we can control <code>.renderBody</code> and <code>.renderPageContributions</code> with the <code>clientRender</code> parameter. In this example, we called them both without it (so <code>body</code> is rendered on the server-side into the HTML, and <code>.hydrate</code> is called on the body in the client, instead of <code>.render</code>).
The <code>clientRender</code> parameter <strong>should match between the two rendering functions</strong> for a React4XP object: if we add it to <code>.renderBody</code> (and it&#8217;s true/truthy), we should add it to <code>.renderPageContributions</code> too.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><strong>Okay, let&#8217;s take a look!</strong></p>
</div>
</div>
<div class="sect2">
<h3 id="setup_3"><a class="link" href="#setup_3">Setup</a></h3>
<div class="paragraph">
<p>Like before, open Enonic XP Content Studio, add the new part to some content, select and edit it and change the Color of the Thing, for example to "blue".</p>
</div>
<div class="paragraph">
<p>Save, it should look something like this:</p>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="media/the-blue-thing2.png" alt="Rendered text in Content Studio is blue, and says: the blue thing" width="1068px">
</div>
</div>
</div>
<div class="sect2">
<h3 id="output_3"><a class="link" href="#output_3">Output</a></h3>
<div class="paragraph">
<p>If we open it in Preview and look at the browser console, we also see that the little <code>console.log</code> script from the controller has picked up the <code>color</code> prop from the React4XP object:</p>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="media/the-blue-thing.png" alt="Rendered preview looks the same as in Content Studio, but now we also see that the expected output was printed in the browser console." width="1068px">
</div>
</div>
<div class="paragraph">
<p><strong>The output page source</strong> should similar to this (and similar to what <code>.render</code> generated earlier):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;body&gt;
    &lt;main data-portal-region="main" class="xp-region"&gt;

        &lt;div data-portal-component-type="part"&gt;
            &lt;p&gt;Here comes the thing:&lt;/p&gt;
            &lt;div&gt;&lt;/div&gt;
            &lt;div id="_99689402"&gt;
                &lt;div style="border:1px dotted blue;margin:5px;padding:5px" data-reactroot=""&gt;
                    &lt;h2&gt;The &lt;!-- --&gt;blue&lt;!-- --&gt; thing&lt;/h2&gt;
                    &lt;p style="color:blue"&gt;Hey, I'm pretty &lt;!-- --&gt;blue&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

    &lt;/main&gt;
    &lt;script src="(...) react4xp/externals.88e80cab5.js"&gt;&lt;/script&gt;
    &lt;script src="(...) react4xp-client/"&gt;&lt;/script&gt;

    &lt;script&gt;console.log('Okay, rendered the blue thing.');&lt;/script&gt;

    &lt;script src="(...) react4xp/ColorThing.js"&gt;&lt;/script&gt;
    &lt;script defer&gt;React4xp.CLIENT.hydrate(React4xp['ColorThing'], "_99689402", {
        "color": "blue",
        "react4xpId": "_99689402"
    });&lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
the random but matching ID (<em>uniqueId</em>) of the target container and in the <code>React4xp.CLIENT.hydrate</code> call.
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="chaining"><a class="link" href="#chaining">Chaining</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Demonstrating some final features:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>We&#8217;ll stay with the syntax from the previous example, and that lets us make <strong>a part with multiple entries</strong> - both different entries and reusing multiple instances of the same entry.</p>
<div class="ulist">
<ul>
<li>
<p><strong>Chaining:</strong> We&#8217;ll see how rendered bodies and page contributions are passed through all the entries, before returning the final <code>body</code> and <code>pageContribution</code> to the response object.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Importing other React components into your entries - both other entries and React components from dependency <strong>chunks</strong>:</p>
<div class="ulist">
<ul>
<li>
<p>Webpack compiles and packs code into "sub-libraries", for bundling up and optimizing code that&#8217;s frequently imported by other entries (or chunks).</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Obviously, this is gonna be the most complex example. Also, some of the React components in this example will be <em>stateful and active</em> on the client (this doesn&#8217;t really demonstate anything - active components don&#8217;t require anything special from React4XP, we&#8217;ve just been using passive components until now).</p>
</div>
<div class="listingblock">
<div class="title">Files involved:</div>
<div class="content">
<pre class="highlight"><code class="language-files" data-lang="files">react4xp/
  _entries/
    mySubfolder/ <i class="conum" data-value="1"></i><b>(1)</b>
      BuilderClickerEntry.jsx
  myChunk/ <i class="conum" data-value="2"></i><b>(2)</b>
    BuilderClicker.jsx
site/parts:
  /chaining/
    chaining.jsx
    chaining.xml
    chaining.html
    chaining.es6</code></pre>
</div>
</div>
<div class="paragraph">
<p>Just make a mental note of a difference from before - <strong>two added subfolders:</strong></p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><code>mySubfolder</code> under <code>react4xp/_entries/</code></td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td><code>myChunk</code> under <code>react4xp/</code></td>
</tr>
</table>
</div>
<div class="paragraph">
<p>They are important in two ways, we&#8217;ll see how in a moment.</p>
</div>
<div class="sect2">
<h3 id="code_4"><a class="link" href="#code_4">Code</a></h3>
<div class="paragraph">
<p>The first entry:</p>
</div>
<div class="listingblock">
<div class="title">react4xp/_entries/mySubfolder/BuilderClickerEntry.jsx:</div>
<div class="content">
<pre class="highlight"><code class="language-JavaScript" data-lang="JavaScript">import React from 'react';

import BuilderClicker from '../../myChunk/BuilderClicker';

export default (props) =&gt; &lt;div className="builderclicker-entry"&gt;
		&lt;BuilderClicker {...props} /&gt;
	&lt;/div&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Some repetition from before: remember how <strong>JSX files below <code>react4xp/_entries</code> will be compiled to entries, with a jsxPath relative to that folder and without the file extension</strong>? So this will be an entry with the jsxPath <code>mySubfolder/BuilderClickerEntry</code>.</p>
</div>
<div class="paragraph">
<p>It&#8217;s functionally pretty slim, it doesn&#8217;t do much except import another React component, <code>react4xp/myChunk/BuilderClicker</code> and pass the props down to it. Since <code>BuilderClicker</code> is not under <code>react4xp/_entries</code>, it&#8217;s not an entry and can&#8217;t be used by React4XP. Which is why it needs an entry like this.</p>
</div>
<div class="paragraph">
<p><strong>A slightly heavier, non-entry React component:</strong></p>
</div>
<div class="listingblock">
<div class="title">react4xp/myChunk/BuilderClicker.jsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React from 'react';

class BuilderClicker extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            first: props.first,
            second: props.second,
        }
    };

    // Doubles the 'first' or 'second' string in state, depending on the key.
    makeMore = (key) =&gt; {
        this.setState({[key]: this.state[key] + " " + this.state[key]});
    };

    render() {
        return &lt;div className="builderclicker"&gt;
            &lt;h3 style={{color:"green"}}&gt;
                &lt;span onClick={() =&gt; this.makeMore('first')}
                      style={{cursor: "pointer"}}
                      className="first"&gt;{this.state.first}
                &lt;/span&gt; &lt;span onClick={() =&gt; this.makeMore('second')}
                      style={{cursor: "pointer"}}
                      className="second"&gt;{this.state.second}&lt;/span&gt;
            &lt;/h3&gt;
        &lt;/div&gt;;
    }
};

export default (props) =&gt; &lt;BuilderClicker {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>BuilderClicker</code> displays two texts in one line, and builds more by doubling each of the texts whenever they are clicked in the browser.</p>
</div>
<div class="paragraph">
<p>This is a <em>non-entry</em> React component, that will be imported by several of the entries in this example (<code>BuilderClickerEntry</code> is one of them). Because of its source file location, <code>BuilderClicker</code> will be compiled into a highly reuseable, optimized and auto-handled chunk called <code>myChunk</code>:</p>
</div>
<div class="sect3">
<h4 id="chunks"><a class="link" href="#chunks">Chunks:</a></h4>
<div class="paragraph">
<p><strong>JSX files that are <em>not</em> under <code>site/</code> or <code>react4xp/_entries</code> won&#8217;t be compiled into entries</strong>. They don&#8217;t have a jsxPath, and <strong>need to be imported by an entry</strong> to be used in React4XP (or to be precise: they must be part of an import tree with an entry on top).</p>
</div>
<div class="paragraph">
<p><strong>Everything that&#8217;s imported from files in other subfolders below <code>react4xp/</code> will be compiled into chunks</strong>. These are "sub-library" code bundles with the same name as the subfolder. They are <strong>optimized</strong> for repeated loading and runtime import, and cached for reuse, with a cache-busting content hash added to the file name.</p>
</div>
<div class="paragraph">
<p>Chunks are made to be <strong>fire-and-forget:</strong> you don&#8217;t need to handle them in any way after naming the subfolders and importing the contents correctly. React4xp takes care of them during serving, caching and server-side rendering.</p>
</div>
<div class="paragraph">
<p>One recommended usage - an entry as a bridge between React4xp and more heavyweight React components:</p>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>Since the chunks are most optimized, it&#8217;s recommended to keep the entries slim and put as much of the heavy and reusable stuff as possible into chunks.</strong> Also, it&#8217;s best to keep the non-entries in chunks: each JSX entry is compiled to its own separate JS file. If an entry imports a non-entry piece of code that&#8217;s <em>not in a chunk either</em>, it will just be compiled into the entry&#8217;s JS "bundle", making it more heavy-weight.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p><strong>Another entry in the part:</strong></p>
</div>
<div class="listingblock">
<div class="title">site/parts/chaining/chaining.jsx:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">import React from 'react';
import BuilderClickerEntry from '../../../react4xp/_entries/mySubfolder/BuilderClickerEntry';

export default (props) =&gt; &lt;BuilderClickerEntry {...props} /&gt;;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Three things to note here:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>An entry can import and nest another entry just fine (if you should ever need to),</p>
</li>
<li>
<p>The same React component, <code>BuilderClicker</code>, is imported from its chunk more than once in the same part (but only loaded once in the client),</p>
</li>
<li>
<p>The two instances of it are functional and independent in the client. The fact that it&#8217;s imported into the part through two different entries doesn&#8217;t matter for this - we&#8217;ll show this by using <em>this</em> entry twice in the controller.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>The part definition</strong> doesn&#8217;t define anything editorial this time:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/chaining/chaining.xml:</div>
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;part&gt;
  &lt;display-name&gt;Chaining&lt;/display-name&gt;
  &lt;description&gt;Multiple react components, chaining, nesting, hydration&lt;/description&gt;
  &lt;form /&gt;
&lt;/part&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>The part view</strong> has two target containers (with hardcoded IDs) and a horizontal divider, and clearly expects some more containers to be added:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/chaining/chaining.html:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-html" data-lang="html">&lt;div class="chaining-example"&gt;
    &lt;h1&gt;04 - Chaining Example&lt;/h1&gt;
    &lt;p&gt;These two target containers existed in the HTML:&lt;/p&gt;
    &lt;div id="a-target-container"&gt;&lt;/div&gt;
    &lt;div id="another-target-container"&gt;&lt;/div&gt;

    &lt;hr style="display:block; margin:20px; width:100%; height:1px; border:1px dotted #aaa;"/&gt;
    &lt;p&gt;The rest of the containers don't exist before rendering, but are inserted at the end:&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>And finally, the juicy part controller:</p>
</div>
<div class="listingblock">
<div class="title">site/parts/chaining/chaining.es6:</div>
<div class="content">
<pre class="highlight nowrap"><code class="language-javascript" data-lang="javascript">const portal = require('/lib/xp/portal');
const thymeleaf = require('/lib/thymeleaf');
const React4xp = require('/lib/enonic/react4xp');

const view = resolve("chaining.html");

exports.get = function(request) {
    const component = portal.getComponent();

    const clientRender = (request.mode !== 'edit' &amp;&amp; request.mode !== 'inline'); <i class="conum" data-value="1"></i><b>(1)</b>


    const firstReact4xpObj = new React4xp('mySubfolder/BuilderClickerEntry') <i class="conum" data-value="2"></i><b>(2)</b>
        .setId("a-target-container")
        .setProps({
            first: "Click",
            second: "ME!"
        });

    const secondReact4xpObj = new React4xp(component) <i class="conum" data-value="3"></i><b>(3)</b>
        .setId("another-target-container")
        .setProps({
            first: "No click ME!",
            second: "I do the exact same thing only better!"
        });

    // ------------------------------ A horizontal separator comes here in the view:
    // a new section where React4XP generates and inserts target containers where the
    // IDs didn't exist in the HTML


    const thirdReact4xpObj = new React4xp(component) <i class="conum" data-value="4"></i><b>(4)</b>
        .setId("a-third-container-doesnt-exist-but-will-be-generated") <i class="conum" data-value="5"></i><b>(5)</b>
        .setProps({
            first: "Here I am.",
            second: "Again."
        });


    let body = thymeleaf.render(view, {});

    body = firstReact4xpObj.renderBody({ body }); <i class="conum" data-value="6"></i><b>(6)</b>
    body = secondReact4xpObj.renderBody({ body, clientRender });
    body = thirdReact4xpObj.renderBody({ body });

    let pageContributions = firstReact4xpObj.renderPageContributions();
    pageContributions = secondReact4xpObj.renderPageContributions({
    	pageContributions,
    	clientRender
    });
    pageContributions = thirdReact4xpObj.renderPageContributions({ pageContributions });


    ['first', 'second', 'third', 'fourth'].forEach(cardinalNum =&gt; {	<i class="conum" data-value="7"></i><b>(7)</b>
        const notUniqueComp = new React4xp(
            	'site/parts/hello-react/hello-react'
            )
            .setId('this-is-not-unique')
            .setProps({ greetee: `${cardinalNum} repeated thing`});

        body = notUniqueComp.renderBody({ body });
        pageContributions = notUniqueComp.renderPageContributions({ pageContributions });
    });


    ['first', 'second', 'third', 'fourth'].forEach(cardinalNum =&gt; {
        const uniqueComp = new React4xp(
            	'site/parts/hello-react/hello-react'
            )
            .setId('this-id-is-unique').uniqueId() <i class="conum" data-value="8"></i><b>(8)</b>
            .setProps({ greetee: `${cardinalNum} unique thing`});

        body = uniqueComp.renderBody({body});
        pageContributions = uniqueComp.renderPageContributions({ pageContributions });
    });


    return { <i class="conum" data-value="9"></i><b>(9)</b>
        body,
        pageContributions: clientRender ?
            pageContributions :
            undefined,
    };
};</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td><strong>Content Studion and client-side rendering/hydration:</strong> Just like we did in the previous example, it&#8217;s a good idea to respond to XP&#8217;s viewing mode: are the react components being displayed inside Content Studio (request.mode is 'edit' or 'inline')? If so, the client-side JS of Content  Studio may clash with react&#8217;s JS. We&#8217;re making a boolean <code>clientRender</code> for common control of all the entries in this part. This allows client-side rendering and hydration only outside Content Studio, and makes React4xp render static and un-hydrated HTML visualizations inside Content Studio - giving a visualization everywhere but activation only outside of Content Studio. Repetition: the <code>React4xp.render</code> shorthand function does all this automatically, if you prefer that.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Importing <code>BuilderClicker</code> from <code>myChunk</code> a first time, through <code>BuilderClickerEntry</code>&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>&#8230;&#8203;and a sceond time, through the part&#8217;s own entry (referred by <code>component</code>) which nests <code>BuilderClickerEntry</code>&#8230;&#8203;</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>&#8230;&#8203;and a third time, through the same part&#8217;s own entry again.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>From here on down, none of the IDs will exist as target element IDs in the body. React4XP auto-handles this by inserting them at the end of <code>body</code>, in the order of chaining:</td>
</tr>
<tr>
<td><i class="conum" data-value="6"></i><b>6</b></td>
<td><strong>Chaining:</strong> First creates a <code>body</code> starting point from the local Thymeleaf template. This is <em>passed through</em> the <code>.renderBody</code> method of all the React4XP objects, each one expanding <code>body</code> by inserting either just a container element (<code>clientRender</code>) or rendering more React into it. <code>firstReact4xpObj</code> and <code>thirdReact4xpObj</code> will be server-side-rendered, <code>secondReact4xpObj</code> will be client-side-rendered. Note how <strong>the <code>clientRender</code> parameter matches for each React4XP object</strong>, between the <code>renderBody</code> and <code>.renderPageContributions</code> calls in the next step. <code>.renderPageContributions</code> works the same way: a <code>pageContributions</code> object is expanded with activating scripts for each time it passes through a React4XP object. <code>.renderPageContributions</code> only appends what&#8217;s necessary, so that shared components and chunks etc aren&#8217;t loaded more than once in the client.</td>
</tr>
<tr>
<td><i class="conum" data-value="7"></i><b>7</b></td>
<td>Making 4 unique React4XP objects from the same entry, with different props, and adding them to the chain. <em>They all have the same ID</em> (<code>'this-is-not-unique'</code>), so they will be rendered and overwritten into the same container element - so only the last one of them survives and is visible.</td>
</tr>
<tr>
<td><i class="conum" data-value="8"></i><b>8</b></td>
<td>So the lesson is to force the IDs to be unique, by adding a <code>.uniqueId()</code> call in each iteration. Now that the IDs are different, and they each get their own container element and all four are visibly rendered.</td>
</tr>
<tr>
<td><i class="conum" data-value="9"></i><b>9</b></td>
<td>And finally, outputting the results of the chain (although the pageContributions are skipped inside Content Studio).</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>In this example we&#8217;re making a new React4xp object for each rendering. An object can in principle be re-rendered, <strong>but rendering a body or pageContribution will lock the ID</strong> of the object.</p>
</div>
<div class="paragraph">
<p>In other words: we can use an <em>entry</em> multiple times target1ing different container elements by using different React4XP objects. And we can render the same <em>React4XP object</em> into the same container multiple times (if we should need to). But <strong>trying to change the ID and target element will throw an error after an object&#8217;s first rendering.</strong></p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="setup_4"><a class="link" href="#setup_4">Setup</a></h3>
<div class="paragraph">
<p>Add this part the same way as in the previous examples and look at it in the Preview - you should see this:</p>
</div>
<div class="imageblock thumb">
<div class="content">
<img src="media/chaining2.png" alt="You clicked, Sir? I am but a humble screenshot!" width="1036px">
</div>
</div>
<div class="paragraph">
<p>The few things worth confirming here:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A <strong>many-to-many relationship</strong>: all of the entries and React4xp objects were visualized by a single part here. And some of the entries have been used in other parts and across several React4xp objects.</p>
</li>
<li>
<p>This is but a humble screenshot, but in the actual Preview outside of Content Studio, the green rendered <code>BuilderClicker</code> instances are now <strong>active</strong> and respond to clicks as defined in <code>BuilderClicker</code>: clicking the first or second half of each of them doubles the clicked text (this activation happened in the <code>.hydrate</code> steps for server-side rendered entries, and in the actual rendering for client-side rendered ones).</p>
</li>
<li>
<p>The clicks and reponses are <strong>isolated</strong> to the instance that was actually clicked: even though they are technically the same entry <code>BuilderClicker</code>, they each have their own state. This is not because <code>BuilderClicker</code> is nested differently in them, but because their ID&#8217;s are different,</p>
</li>
<li>
<p>There&#8217;s only one "&#8230;&#8203;repeated thing" but four "&#8230;&#8203;unique thing", as explained above (point 7 and 8 in the controller code)</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="output_4"><a class="link" href="#output_4">Output</a></h3>
<div class="paragraph">
<p><strong>The output page source</strong> to the client is much longer now. If you want to dive into that, it would look something like this:</p>
</div>
<div class="listingblock">
<div class="title">Huge page source:</div>
<div class="content">
<pre class="highlight"><code class="language-html" data-lang="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;&lt;/head&gt;

    &lt;body&gt;

        &lt;main data-portal-region="main" class="xp-region"&gt;
            &lt;div data-portal-component-type="part" class="chaining-example"&gt;
                &lt;h1&gt;04 - Chaining Example&lt;/h1&gt;
                &lt;p&gt;These two target containers existed in the HTML:&lt;/p&gt;

                &lt;div id="a-target-container"&gt; <i class="conum" data-value="1"></i><b>(1)</b>
                    &lt;div class="builderclicker-entry" data-reactroot=""&gt;
                        &lt;div class="builderclicker"&gt;
                            &lt;h3 style="color:green"&gt;
                                &lt;span style="cursor:pointer" class="first"&gt;Click&lt;/span&gt;
                                &lt;span style="cursor:pointer" class="second"&gt;ME!&lt;/span&gt;
                            &lt;/h3&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div id="another-target-container"&gt;&lt;/div&gt; <i class="conum" data-value="1"></i><b>(1)</b>

                &lt;hr style="display:block; margin:20px; width:100%; height:1px; border:0; border-bottom:1px dotted #aaa;"/&gt;
                &lt;p&gt;The rest of the containers don't exist before rendering, but are generated and inserted at the end:&lt;/p&gt;
                &lt;br/&gt;

                &lt;div id="a-third-container-doesnt-exist-but-will-be-generated"&gt;  <i class="conum" data-value="2"></i><b>(2)</b>
                    &lt;div class="builderclicker-entry" data-reactroot=""&gt;
                        &lt;div class="builderclicker"&gt;
                            &lt;h3 style="color:green"&gt;
                                &lt;span style="cursor:pointer" class="first"&gt;Here I am.&lt;/span&gt;
                                &lt;span style="cursor:pointer" class="second"&gt;Again.&lt;/span&gt;
                            &lt;/h3&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;

                &lt;div id="this-is-not-unique"&gt;  <i class="conum" data-value="3"></i><b>(3)</b>
                	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;fourth repeated thing&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;

                &lt;div id="this-id-is-unique_82264525"&gt;
                	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;first unique thing&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;
                &lt;div id="this-id-is-unique_92592361"&gt;
                	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;second unique thing&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;
                &lt;div id="this-id-is-unique_73808051"&gt;
                	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;third unique thing&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;
                &lt;div id="this-id-is-unique_54219185"&gt;
                	&lt;p data-reactroot=""&gt;Hello &lt;!-- --&gt;fourth unique thing&lt;!-- --&gt; !&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/main&gt;

        &lt;script src=" (...) /react4xp/externals.88e80cab5.js"&gt;&lt;/script&gt;
        &lt;script src=" (...) /react4xp-client/"&gt;&lt;/script&gt;
        &lt;script src=" (...) /react4xp/myChunk.b26b22ea4.js"&gt;&lt;/script&gt;  <i class="conum" data-value="4"></i><b>(4)</b>

        &lt;script src=" (...) /react4xp/mySubfolder/BuilderClickerEntry.js"&gt;&lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['mySubfolder/BuilderClickerEntry'],
                "a-target-container",
                {
                    "first": "Click",
                    "second": "ME!",
                    "react4xpId": "a-target-container"
                }
            );
        &lt;/script&gt;

        &lt;script src=" (...) /react4xp/site/parts/chaining/chaining.js"&gt;&lt;/script&gt;  <i class="conum" data-value="5"></i><b>(5)</b>
        &lt;script defer&gt;
            React4xp.CLIENT.render(
                React4xp['site/parts/chaining/chaining'],
                "another-target-container",
                {
                    "first": "No click ME!",
                    "second": "I do the exact same thing only better!",
                    "react4xpId": "another-target-container"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/chaining/chaining'],
                "a-third-container-doesnt-exist-but-will-be-generated",
                {
                    "first": "Here I am.",
                    "second": "Again.",
                    "react4xpId": "a-third-container-doesnt-exist-but-will-be-generated"
                }
            );
        &lt;/script&gt;

        &lt;script src=" (...) /react4xp/site/parts/hello-react/hello-react.js"&gt;&lt;/script&gt; <i class="conum" data-value="5"></i><b>(5)</b>
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'], <i class="conum" data-value="3"></i><b>(3)</b>
                "this-is-not-unique",
                {
                    "greetee": "first repeated thing",
                    "react4xpId": "this-is-not-unique"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-is-not-unique",
                {
                    "greetee": "second repeated thing",
                    "react4xpId": "this-is-not-unique"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-is-not-unique",
                {
                    "greetee": "third repeated thing",
                    "react4xpId": "this-is-not-unique"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-is-not-unique",
                {
                    "greetee": "fourth repeated thing",
                    "react4xpId": "this-is-not-unique"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-id-is-unique_82264525",
                {
                    "greetee": "first unique thing",
                    "react4xpId": "this-id-is-unique_82264525"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-id-is-unique_92592361",
                {
                    "greetee": "second unique thing",
                    "react4xpId": "this-id-is-unique_92592361"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-id-is-unique_73808051",
                {
                    "greetee": "third unique thing",
                    "react4xpId": "this-id-is-unique_73808051"
                }
            );
        &lt;/script&gt;
        &lt;script defer&gt;
            React4xp.CLIENT.hydrate(
                React4xp['site/parts/hello-react/hello-react'],
                "this-id-is-unique_54219185",
                {
                    "greetee": "fourth unique thing",
                    "react4xpId": "this-id-is-unique_54219185"
                }
            );
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Just confirming what you surely guessed would happen:</p>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>While the first and third React4XP objects were server-side rendered and hydrated, the second one was client-side rendered into an empty container.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Several of the containers that were output weren&#8217;t defined in the original Thymeleaf template, and were only rendered because the ID wasn&#8217;t found.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Only one container with <em>"this-is-not-unique"</em> was rendered for the same reason: that ID had already been inserted. So all the corresponding React4XP objects were server-side rendered into that one. This would also happen with client-side rendering! Also look further down: the client is asked to <code>hydrate</code> all four instances, which will log errors in the console since the content doesn&#8217;t match.</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>React4xp automatically traced the dependency to <code>myChunk.&lt;hash&gt;.js</code> and added this import to the page contributions because that&#8217;s where <code>BuilderClicker</code> comes from.</td>
</tr>
<tr>
<td><i class="conum" data-value="5"></i><b>5</b></td>
<td>Although several of the generated assets are <em>used</em> more than once, the page contributions are trimmed for duplicates so each of them are only <em>downloaded to the client</em> once.</td>
</tr>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="need_to_go_deeper"><a class="link" href="#need_to_go_deeper">Need to go deeper?</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Thats <em>most</em> of what React4XP offers. For more technical details, some corner-case features, adaptability and more complex functionality, we will shortly release on the Enonic pages a full API overview and other in-depth documentation for the library and build setup.</p>
</div>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Last updated 2023-08-03 12:34:34 UTC
</div>
</div>
</body>
</html>